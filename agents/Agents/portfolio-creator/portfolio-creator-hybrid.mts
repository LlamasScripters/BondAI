import 'dotenv/config';
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { structureUserData } from "./tools/data-structurer.mts";
import { projectFileGeneratorUltraSimple } from "./tools/project-file-generator-ultra-simple.mts";

const agentModel = new ChatGoogleGenerativeAI({
  temperature: 0.7,
  model: process.env.GEMINI_MODEL || "gemini-1.5-flash",
});

interface ConversationMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

class HybridPortfolioCreatorAgent {
  private conversations = new Map<string, ConversationMessage[]>();

  async invoke(input: { message: string; thread_id?: string }): Promise<{ content: string; thread_id: string }> {
    const threadId = input.thread_id || `thread-${Date.now()}`;
    
    console.log(`ü§ñ AGENT HYBRIDE: Message pour thread ${threadId}: "${input.message}"`);
    
    // R√©cup√©rer la conversation existante
    if (!this.conversations.has(threadId)) {
      this.conversations.set(threadId, []);
    }
    const conversation = this.conversations.get(threadId)!;
    
    // Ajouter le message utilisateur
    conversation.push({
      role: 'user',
      content: input.message,
      timestamp: new Date()
    });
    
    try {
      // üî• INTERCEPTION : Si l'utilisateur choisit une option ‚Üí FORCER LA G√âN√âRATION
      if (input.message.toLowerCase().includes('option')) {
        console.log('üöÄ OPTION D√âTECT√âE - G√âN√âRATION FORC√âE PAR CODE');
        const response = await this.forceGeneration(conversation, input.message);
        
        conversation.push({
          role: 'assistant',
          content: response,
          timestamp: new Date()
        });
        
        return { content: response, thread_id: threadId };
      }
      
      // Sinon, utiliser le LLM avec des instructions strictes
      const response = await this.askLLM(conversation);
      
      // üî• FALLBACK : Si on a 6+ messages et pas d'options propos√©es, FORCER
      const messageCount = conversation.filter(m => m.role === 'user').length;
      const hasNotProposedOptions = !response.toLowerCase().includes('option 1 : react');
      
      let finalResponse = response;
      if (messageCount >= 6 && hasNotProposedOptions && !response.includes('stack technologique')) {
        console.log('üö® FALLBACK ACTIV√â - FORCE LES OPTIONS');
        finalResponse = `üöÄ Parfait ! J'ai maintenant toutes les informations n√©cessaires pour cr√©er votre portfolio. Choisissez votre stack technologique :

**Option 1 : React + TanStack + shadcn/ui + TypeScript**
- Moderne et tr√®s recherch√© par les employeurs

**Option 2 : Vue.js 3 + Pinia + Vue Router + TypeScript**  
- Framework intuitif et performant

**Option 3 : Je ne sais pas / Performance maximale**
- HTML5 + JavaScript ES6+ + CSS natif

Quelle option pr√©f√©rez-vous ?`;
      }
      
      conversation.push({
        role: 'assistant',
        content: finalResponse,
        timestamp: new Date()
      });
      
      return { content: finalResponse, thread_id: threadId };
      
    } catch (error) {
      console.error('‚ùå Erreur agent hybride:', error);
      return {
        content: "‚ùå Erreur lors du traitement de votre demande.",
        thread_id: threadId
      };
    }
  }

  private async forceGeneration(conversation: ConversationMessage[], choice: string): Promise<string> {
    try {
      console.log('üéØ D√âBUT G√âN√âRATION FORC√âE (SANS LLM)');
      
      // D√©terminer la stack choisie
      let selectedStack: 'react' | 'vue' | 'vanilla' = 'react';
      if (choice.toLowerCase().includes('option 2')) {
        selectedStack = 'vue';
      } else if (choice.toLowerCase().includes('option 3')) {
        selectedStack = 'vanilla';
      }

      console.log(`üöÄ Stack s√©lectionn√©e: ${selectedStack}`);
      
      // Structurer les donn√©es de la conversation
      const conversationText = conversation.map(m => `${m.role}: ${m.content}`).join('\n');
      console.log('üìä Appel tool structureUserData...');
      
      const structuredData = await structureUserData.invoke({
        conversationData: conversationText
      });
      
      console.log('üîß Appel tool projectFileGeneratorUltraSimple...');
      
      // G√©n√©rer le projet
      const projectResult = await projectFileGeneratorUltraSimple.invoke({
        selectedStack,
        userStructuredData: structuredData,
        projectName: "portfolio-hybrid"
      });
      
      console.log('‚úÖ G√âN√âRATION FORC√âE TERMIN√âE');
      
      // Transformer le JSON en message utilisateur-friendly MAIS garder le JSON pour l'interface
      try {
        const parsed = JSON.parse(projectResult);
        if (parsed.success) {
          // Retourner le JSON ET le message user-friendly s√©par√©s par un marqueur
          const userMessage = `‚úÖ Votre portfolio ${selectedStack.toUpperCase()} a √©t√© g√©n√©r√© avec succ√®s !

üéâ Votre projet est pr√™t et inclut :
- Page HTML moderne et responsive  
- Composants React/Vue r√©utilisables
- Configuration package.json compl√®te
- Documentation README.md

üì• **Votre fichier ZIP est pr√™t √† t√©l√©charger !**

Le projet contient ${parsed.files?.length || 3} fichiers et utilise la stack ${selectedStack.toUpperCase()}.

üîó Utilisez le bouton de t√©l√©chargement qui appara√Æt automatiquement pour r√©cup√©rer votre portfolio !`;

          // Retourner le message user-friendly + JSON cach√© pour l'interface
          return `${userMessage}

<!-- PROJECT_DATA: ${projectResult} -->`;
        }
      } catch {
        // Si le parsing √©choue, on retourne le r√©sultat tel quel
      }
      
      return projectResult;
      
    } catch (error) {
      console.error('‚ùå ERREUR G√âN√âRATION FORC√âE:', error);
      return `‚ùå Erreur lors de la g√©n√©ration: ${error.message}`;
    }
  }

  private async askLLM(conversation: ConversationMessage[]): Promise<string> {
    const conversationText = conversation.map(m => `${m.role}: ${m.content}`).join('\n');
    
    // D√©tecter si on doit proposer les options
    const shouldProposeOptions = this.shouldProposeStackOptions(conversationText);
    
    // Compter les √©changes pour d√©cider
    const messageCount = conversationText.split('\n').filter(m => m.startsWith('user:')).length;
    const hasNotProposedOptions = !conversationText.toLowerCase().includes('option 1 : react');
    
    let prompt = `Tu es un assistant portfolio IA. R√©ponds en fran√ßais de mani√®re naturelle et engageante.

Conversation actuelle:
${conversationText}

R√àGLES STRICTES:
- Ne JAMAIS proposer Next.js, Symfony, ou d'autres stacks
- SEULEMENT les 3 options fixes : React+TanStack, Vue+Pinia, ou Vanilla
- Poser PLUSIEURS questions avant de proposer les stacks

Instructions:
${(shouldProposeOptions || messageCount >= 6) && hasNotProposedOptions ? `
üî•üî•üî• ABSOLUMENT OBLIGATOIRE - TU DOIS PROPOSER LES OPTIONS MAINTENANT üî•üî•üî•

Copie-colle EXACTEMENT ce texte (RIEN d'autre) :

üöÄ Parfait ! J'ai maintenant toutes les informations n√©cessaires pour cr√©er votre portfolio. Choisissez votre stack technologique :

**Option 1 : React + TanStack + shadcn/ui + TypeScript**
- Moderne et tr√®s recherch√© par les employeurs

**Option 2 : Vue.js 3 + Pinia + Vue Router + TypeScript**  
- Framework intuitif et performant

**Option 3 : Je ne sais pas / Performance maximale**
- HTML5 + JavaScript ES6+ + CSS natif

Quelle option pr√©f√©rez-vous ?

üö® STOP - N'ajoute AUCUN autre texte apr√®s √ßa !
` : `
- Si l'utilisateur n'a pas donn√© son nom, demande son nom et titre professionnel
- Si il n'a pas donn√© ses comp√©tences, demande ses comp√©tences principales
- Si il n'a pas parl√© de projets, demande ses projets principaux
- Si il n'a pas parl√© d'objectifs, demande ses objectifs (emploi, freelance, etc.)
- Si il n'a pas parl√© de design, demande ses pr√©f√©rences de style
- Sois naturel et engageant
- Une seule question courte √† la fois
- APR√àS AU MOINS 5 questions/r√©ponses, tu pourras proposer les 3 options de stack
- NE JAMAIS mentionner Next.js, Symfony, CMS ou autres stacks
`}

R√©ponds:`;

    console.log('ü§ñ Appel LLM Gemini...');
    const response = await agentModel.invoke([{ role: 'user', content: prompt }]);
    return response.content as string;
  }

  private shouldProposeStackOptions(conversationText: string): boolean {
    const text = conversationText.toLowerCase();
    const messages = conversationText.split('\n');
    
    // Compter les √©changes (approximatif)
    const userMessages = messages.filter(m => m.startsWith('user:')).length;
    const assistantMessages = messages.filter(m => m.startsWith('assistant:')).length;
    
    // V√©rifier qu'on a d√©j√† eu assez d'√©changes (augment√© √† 6)
    const hasEnoughExchanges = userMessages >= 6 && assistantMessages >= 5;
    
    // V√©rifier qu'on n'a pas d√©j√† propos√© les options
    const hasNotProposedYet = !text.includes('option 1 : react') && 
                              !text.includes('stack technologique') &&
                              !text.includes('quelle option pr√©f√©rez');
    
    // D√©tection d'informations compl√®tes
    const hasName = text.includes('je suis') || text.includes('nom');
    const hasSkills = text.includes('d√©veloppeur') || text.includes('comp√©tences') || text.includes('typescript') || text.includes('react') || text.includes('vue');
    const hasProjects = text.includes('projet') || text.includes('exp√©rience') || text.includes('travaill√©');
    const hasObjectives = text.includes('objectif') || text.includes('emploi') || text.includes('freelance') || text.includes('portfolio');
    
    const hasCompleteInfo = hasName && hasSkills && (hasProjects || hasObjectives);
    
    console.log(`üìä Analyse COMPL√àTE: √©changes=${userMessages}/${assistantMessages}, nom=${hasName}, skills=${hasSkills}, projets=${hasProjects}, objectifs=${hasObjectives}, complet=${hasCompleteInfo}, notProposed=${hasNotProposedYet}`);
    
    // Proposer si on a eu assez d'√©changes ET qu'on a des infos compl√®tes ET qu'on n'a pas d√©j√† propos√©
    return hasEnoughExchanges && hasCompleteInfo && hasNotProposedYet;
  }
}

export const portfolioCreatorAgentHybrid = new HybridPortfolioCreatorAgent(); 