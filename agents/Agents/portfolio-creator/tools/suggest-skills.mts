import { tool } from "@langchain/core/tools";
import { z } from "zod";

export const suggestSkills = tool(
  async ({ jobTitle, experience, industry, currentSkills }) => {
    try {
      const skillDatabase = {
        'd√©veloppeur web': {
          hard: ['React', 'Node.js', 'JavaScript', 'TypeScript', 'HTML/CSS', 'Git', 'REST API'],
          soft: ['Problem solving', 'Collaboration', 'Communication technique']
        },
        'designer ux/ui': {
          hard: ['Figma', 'Sketch', 'Adobe XD', 'Prototyping', 'User Research', 'Wireframing'],
          soft: ['Empathie', 'Cr√©ativit√©', 'Attention aux d√©tails']
        },
        'chef de projet': {
          hard: ['Agile/Scrum', 'Jira', 'MS Project', 'Gantt', 'Budget Management'],
          soft: ['Leadership', 'Communication', 'Organisation', 'Gestion du stress']
        },
        'data scientist': {
          hard: ['Python', 'R', 'SQL', 'Machine Learning', 'TensorFlow', 'Pandas', 'Jupyter'],
          soft: ['Pens√©e analytique', 'Curiosit√©', 'Rigueur scientifique']
        }
      };

      const currentSkillsLower = currentSkills?.map(s => s.toLowerCase()) || [];
      const suggestions = {
        trending: [],
        missing: [],
        complementary: []
      };

      // Suggestions bas√©es sur le poste
      const roleSkills = skillDatabase[jobTitle?.toLowerCase() as keyof typeof skillDatabase];
      if (roleSkills) {
        suggestions.missing = [...roleSkills.hard, ...roleSkills.soft]
          .filter(skill => !currentSkillsLower.includes(skill.toLowerCase()));
      }

      // Comp√©tences tendance selon l'exp√©rience
      if (experience === 'junior') {
        suggestions.trending = ['Git', 'Agile', 'Testing', 'Documentation', 'Code Review'];
      } else if (experience === 'senior') {
        suggestions.trending = ['Architecture', 'Mentoring', 'DevOps', 'Performance', 'Security'];
      }

      // Comp√©tences compl√©mentaires selon l'industrie
      const industrySkills = {
        tech: ['CI/CD', 'Docker', 'AWS', 'Microservices'],
        finance: ['Compliance', 'Risk Management', 'Excel', 'Bloomberg'],
        healthcare: ['HIPAA', 'Medical devices', 'Regulation'],
        ecommerce: ['Payment systems', 'Analytics', 'SEO', 'Conversion optimization']
      };

      if (industry && industrySkills[industry as keyof typeof industrySkills]) {
        suggestions.complementary = industrySkills[industry as keyof typeof industrySkills];
      }

      return `üéØ Suggestions de comp√©tences pour ${jobTitle} (${experience})

${industry ? `üè¢ Secteur : ${industry}` : ''}
üìä Comp√©tences actuelles : ${currentSkills?.length || 0}

üî• Comp√©tences tendance :
${suggestions.trending.length > 0 ? suggestions.trending.map(skill => `‚Ä¢ ${skill}`).join('\n') : '‚Ä¢ Aucune suggestion sp√©cifique pour ce niveau'}

‚ùå Comp√©tences manquantes importantes :
${suggestions.missing.length > 0 ? suggestions.missing.map(skill => `‚Ä¢ ${skill}`).join('\n') : '‚Ä¢ Votre profil semble complet !'}

‚ûï Comp√©tences compl√©mentaires :
${suggestions.complementary.length > 0 ? suggestions.complementary.map(skill => `‚Ä¢ ${skill}`).join('\n') : '‚Ä¢ Aucune suggestion pour ce secteur'}

üí° Recommandations g√©n√©rales :
‚Ä¢ Ajoutez 5-7 comp√©tences techniques principales
‚Ä¢ Incluez 3-4 soft skills importantes  
‚Ä¢ Mentionnez les outils/technologies r√©cents
‚Ä¢ Adaptez selon votre secteur d'activit√©`;

    } catch (error) {
      console.error('Erreur suggestion skills:', error);
      return `‚ùå Erreur lors de la suggestion de comp√©tences`;
    }
  },
  {
    name: "suggestSkills",
    description: "Sugg√®re des comp√©tences pertinentes selon le poste, l'exp√©rience et le secteur d'activit√©",
    schema: z.object({
      jobTitle: z.string().describe("Intitul√© du poste vis√©"),
      experience: z.enum(['junior', 'mid', 'senior']).describe("Niveau d'exp√©rience"),
      industry: z.string().optional().describe("Secteur d'activit√©"),
      currentSkills: z.array(z.string()).optional().describe("Comp√©tences actuelles")
    }),
  }
); 