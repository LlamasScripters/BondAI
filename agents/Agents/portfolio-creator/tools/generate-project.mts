import { tool } from "@langchain/core/tools";
import { z } from "zod";

export const generateProjectDescription = tool(
  async ({ projectName, projectType, technologies, objectives, results, duration, teamSize }) => {
    try {
      const projectTemplates = {
        webapp: {
          intro: "Application web moderne d√©velopp√©e avec",
          focus: "Performance, UX, et scalabilit√©",
          metrics: ["temps de chargement", "taux de conversion", "nombre d'utilisateurs"]
        },
        mobile: {
          intro: "Application mobile native/cross-platform cr√©√©e avec",
          focus: "Exp√©rience utilisateur mobile optimale",
          metrics: ["downloads", "rating app store", "retention rate"]
        },
        api: {
          intro: "API REST/GraphQL robuste d√©velopp√©e avec",
          focus: "Performance, s√©curit√©, et documentation",
          metrics: ["requ√™tes/seconde", "temps de r√©ponse", "uptime"]
        },
        ecommerce: {
          intro: "Plateforme e-commerce compl√®te int√©grant",
          focus: "Conversion, paiement s√©curis√©, et gestion stock",
          metrics: ["taux de conversion", "panier moyen", "transactions"]
        },
        dashboard: {
          intro: "Dashboard analytique interactif d√©velopp√© avec",
          focus: "Visualisation de donn√©es et insights business",
          metrics: ["sources de donn√©es", "m√©triques track√©es", "utilisateurs actifs"]
        },
        design: {
          intro: "Projet de design UX/UI r√©alis√© avec",
          focus: "Exp√©rience utilisateur et interface intuitive",
          metrics: ["am√©lioration UX", "temps de t√¢che", "satisfaction utilisateur"]
        }
      };

      const template = projectTemplates[projectType as keyof typeof projectTemplates] || projectTemplates.webapp;
      
      // G√©n√©rer la description structur√©e
      const sections = [];
      
      // Introduction
      sections.push(`**${projectName}**`);
      sections.push(`${template.intro} ${technologies || 'technologies modernes'}.`);
      
      // Objectifs
      if (objectives) {
        sections.push(`\n**üéØ Objectifs :**`);
        sections.push(objectives);
      }
      
      // D√©fis techniques
      sections.push(`\n**üîß D√©fis techniques :**`);
      sections.push(`Focus principal sur ${template.focus}.`);
      
      // Technologies
      if (technologies) {
        sections.push(`\n**üõ†Ô∏è Stack technique :**`);
        sections.push(technologies);
      }
      
      // √âquipe et dur√©e
      const projectDetails = [];
      if (duration) projectDetails.push(`‚è±Ô∏è Dur√©e : ${duration}`);
      if (teamSize) projectDetails.push(`üë• √âquipe : ${teamSize}`);
      
      if (projectDetails.length > 0) {
        sections.push(`\n**üìä D√©tails projet :**`);
        sections.push(projectDetails.join(' | '));
      }
      
      // R√©sultats
      if (results) {
        sections.push(`\n**üèÜ R√©sultats obtenus :**`);
        sections.push(results);
      } else {
        // Suggestions de r√©sultats selon le type
        sections.push(`\n**üèÜ R√©sultats potentiels :**`);
        sections.push(`‚Ä¢ Am√©lioration des ${template.metrics.join(', ')}`);
        sections.push(`‚Ä¢ Solution √©volutive et maintenable`);
        sections.push(`‚Ä¢ Retours positifs des utilisateurs finaux`);
      }

      // Call-to-action
      sections.push(`\n**üîó [Voir le projet](lien-vers-projet)** | **üì± [Demo live](lien-demo)**`);

      const fullDescription = sections.join('\n');

      // Suggestions d'am√©lioration
      const improvementTips = [
        "Ajoutez des m√©triques pr√©cises (ex: +40% de performance)",
        "Incluez des liens vers le code source ou demo",
        "Mentionnez les feedbacks utilisateurs positifs",
        "D√©crivez les d√©fis techniques surmont√©s",
        "Ajoutez des visuels (screenshots, wireframes)"
      ];

      // Exemple selon le type de projet
      const examples = {
        webapp: "E-commerce moderne avec paiement Stripe, r√©duction de 50% du temps de checkout",
        mobile: "App de fitness avec 4.8/5 sur l'App Store, 100k+ t√©l√©chargements",
        api: "API bancaire g√©rant 10k requ√™tes/sec avec 99.9% d'uptime",
        ecommerce: "Marketplace B2B avec +300% de conversion apr√®s refonte UX",
        dashboard: "Dashboard analytics temps r√©el pour 50+ m√©triques business",
        design: "Refonte UX d'app mobile, -60% du temps de navigation utilisateur"
      };

      return `üöÄ Description du projet ${projectName} g√©n√©r√©e :

${fullDescription}

üí° Conseils d'am√©lioration :
${improvementTips.map(tip => `‚Ä¢ ${tip}`).join('\n')}

üåü Exemple inspirant :
${examples[projectType as keyof typeof examples] || examples.webapp}`;

    } catch (error) {
      console.error('Erreur g√©n√©ration projet:', error);
      return `‚ùå Erreur lors de la g√©n√©ration de la description du projet ${projectName}`;
    }
  },
  {
    name: "generateProjectDescription",
    description: "G√©n√®re une description professionnelle et impactante d'un projet, adapt√©e au type de projet et aux technologies utilis√©es",
    schema: z.object({
      projectName: z.string().describe("Nom du projet"),
      projectType: z.enum(['webapp', 'mobile', 'api', 'ecommerce', 'dashboard', 'design']).describe("Type de projet"),
      technologies: z.string().optional().describe("Technologies et outils utilis√©s"),
      objectives: z.string().optional().describe("Objectifs du projet"),
      results: z.string().optional().describe("R√©sultats et m√©triques obtenus"),
      duration: z.string().optional().describe("Dur√©e du projet"),
      teamSize: z.string().optional().describe("Taille de l'√©quipe")
    }),
  }
); 